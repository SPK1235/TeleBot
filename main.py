from aiogram import Bot, types, Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.dispatcher.filters import Text
import my_command
import os

api_key = '5448201870:AAEIeJ46pycDp_Wqd5DYghExQa6gka6gNIc'
bot = Bot(api_key)
dp = Dispatcher(bot)
#my_command.creation_my_database()


"""@dp.message_handler(commands=['—Å—Ç–∞—Ä—Ç'])
async def command_start(message: types.Message):
    # –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç
    time_day = my_command.command_start_time()
    answer_bot = my_command.read_database(time_day)
    button_1 = KeyboardButton('/–ü—Ä–æ–≥–Ω–æ–∑_–ø–æ–≥–æ–¥—ã' + ' ' + 'üåû' + '/' + '‚òîÔ∏è', request_location=True)
    button_2 = KeyboardButton('/–ö—É—Ä—Å_–≤–∞–ª—é—Ç' + ' ' + 'üíµ')
    button_3 = KeyboardButton('/–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' + ' ' + 'üßÆ')
    button_4 = KeyboardButton('/–ì—Ä–∞—Ñ–∏–∫_—Ä–∞–±–æ—Ç—ã' + ' ' + 'üìÜ')
    my_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    my_keyboard.add(button_1).add(button_2).add(button_3).add(button_4)
    await bot.send_sticker(message.from_user.id, sticker="CAACAgIAAxkBAAEGRBhjYA4xka-yXYefwFxA97eyqsBblwACGg0AArUgEEvhdD6mKGXvgyoE")
    await bot.send_message(message.from_user.id, f'<em>{answer_bot}</em>', parse_mode="HTML", reply_markup=my_keyboard)"""

button_1 = KeyboardButton(text='–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã')
button_2 = KeyboardButton(text='–ö—É—Ä—Å –≤–∞–ª—é—Ç')
button_3 = KeyboardButton(text='–ú–∏–Ω—Å–∫ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', web_app=WebAppInfo(url='https://yandex.ru/maps/157/minsk/transport'))
button_3_1 = KeyboardButton(text='ANEKDOT.RU', web_app=WebAppInfo(url='https://www.anekdot.ru/last/mem'))
my_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
my_keyboard.add(button_1).add(button_2).add(button_3).add(button_3_1)
button_4 = KeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location=True)
button_5 = KeyboardButton(text='YANDEX')
button_6 = KeyboardButton(text='OpenWeather')
button_7 = KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
my_keyboard_2 = ReplyKeyboardMarkup(resize_keyboard=True)
my_keyboard_2.add(button_4).row(button_5, button_6).add(button_7)


@dp.message_handler(commands=['—Å—Ç–∞—Ä—Ç'])
async def command_start(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç"""
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç !!!', reply_markup=my_keyboard)


@dp.message_handler(text='–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã')
async def weather_forecast(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"""
    await bot.send_message(message.from_user.id, '–û–±–Ω–æ–≤–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', reply_markup=my_keyboard_2)


@dp.message_handler(content_types=['location'])
async def location(message):
    global latitude, longitude
    if message.location is not None:
        my_location = message.location
        await message.delete()
        latitude = my_location['latitude']
        longitude = my_location['longitude']


@dp.message_handler(text=['YANDEX'])
async def exchange_rates(message: types.Message):
    global latitude, longitude
    print(latitude, longitude)
    query_result = my_command.parser_yandex_weather(latitude, longitude)
    my_command.creating_picture(query_result)
    await bot.send_photo(message.from_user.id, types.InputFile('1.jpg'))
    os.remove('1.jpg')


@dp.message_handler(text=['OpenWeather'])
async def exchange_rates(message: types.Message):
    global latitude, longitude
    print(latitude, longitude)
    query_result = my_command.parser_yandex_weather(latitude, longitude)
    my_command.creating_picture(query_result)
    await bot.send_photo(message.from_user.id, types.InputFile('1.jpg'))
    os.remove('1.jpg')


@dp.message_handler(text=['–ö—É—Ä—Å –≤–∞–ª—é—Ç'])
async def exchange_rates(message: types.Message):
    my_command.creating_picture_currency()
    await bot.send_photo(message.from_user.id, types.InputFile('1.jpg'))
    os.remove('1.jpg')


@dp.message_handler(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def command_start(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await bot.send_message(message.from_user.id, '–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=my_keyboard)


@dp.message_handler()
async def error_response(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É"""
    error_response = '–ì–æ—Å–ø–æ–¥–∏, –¥–∞–π –º–Ω–µ —Å–∏–ª—ã, —á—Ç–æ–±—ã —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç–µ–º, \n —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å, \n' \
                     '–¥–∞–π –º–Ω–µ –º—É–∂–µ—Å—Ç–≤–æ, —á—Ç–æ–±—ã —Å–º–∏—Ä–∏—Ç—å—Å—è —Å —Ç–µ–º, \n —á–µ–≥–æ —è –Ω–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å, \n ' \
                     '–∏ –¥–∞–π –º–Ω–µ –º—É–¥—Ä–æ—Å—Ç—å, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∏—Ç—å –æ–¥–Ω–æ –æ—Ç –¥—Ä—É–≥–æ–≥–æ !!!'
    await message.reply('–¢–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É , —è –Ω–µ –∑–Ω–∞—é' + ' ' + 'ü§î')
    await message.answer(f'<b>{error_response}</b>' + ' ' + 'ü§î', parse_mode="HTML")


if __name__ == '__main__':
    latitude = '53.915581'
    longitude = '27.662505'
    executor.start_polling(dp, skip_updates=True)
